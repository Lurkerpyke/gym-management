generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  role            String           @default("user")
  createdAt       DateTime         @default(now()) // Add this line
  accounts        Account[]
  sessions        Session[]
  metrics         UserMetrics?
  workoutSessions WorkoutSession[]
  activityLogs    ActivityLog[]    @relation("UserActivity")
  targetedLogs    ActivityLog[]    @relation("TargetUserRelation")
  notifications   Notification[]
  posts           Post[]
  comments        Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // <- Adiciona a restrição única corretamente
}

model Session {
  id           String   @id @default(cuid()) // Alterado para String
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
}

model UserMetrics {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])
  currentWeight       Float    // in kg
  height              Float?   // in meters
  bmi                 Float?
  bodyFat             Float?   // body fat percentage
  muscleMass          Float?   // muscle mass percentage
  waistCircumference  Float?   // in cm
  hipCircumference    Float?   // in cm
  neckCircumference   Float?   // in cm
  lastMeasurement     DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model WorkoutSession {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String?
  date        DateTime
  duration    Int // Duration in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completed   Boolean  @default(false)
}

enum ActivityType {
  USER_LOGIN
  PROFILE_UPDATE
  WORKOUT_CREATED
  ROLE_CHANGE
  SYSTEM_EVENT
}

model ActivityLog {
  id           String       @id @default(cuid())
  userId       String
  targetUserId String?
  actionType   ActivityType
  description  String
  createdAt    DateTime     @default(now())
  metadata     Json?

  user       User  @relation(fields: [userId], references: [id], name: "UserActivity")
  targetUser User? @relation(fields: [targetUserId], references: [id], name: "TargetUserRelation")

  @@index([userId])
  @@index([createdAt])
  @@index([actionType])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  type      String   @default("info")

  @@index([userId])
  @@index([createdAt])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  mediaUrl    String?
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  postType    String    @default("text")
  categories  String[]
  scheduledAt DateTime?
  publishedAt DateTime?
  reactions   Json?
  comments    Comment[]

  @@index([authorId])
  @@index([createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}
